{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vnetName": {
            "type": "String",
            "metadata": {
                "description": "The name of the VNet resource into which the scale set should be installed."
            }
        },
        "apacheMachineSku": {
            "type": "string",
            "metadata": {
                "description": "The sku for the virtual machine size you want to allocate."
            }
        },
        "apacheMinCapacity": {
            "type": "String",
            "metadata": {
                "description": "The minimum number of instances to be spun up at any one time"
            }
        },
        "storageAccountName": {
            "type": "string",
            "metadata": {
                "description": "The name of the storage account to be used for backups and other shared assets."
            }
        },
        "dbHost": {
            "type": "string",
            "metadata": {
                "description": "The host name of the MariaDB instance."
            }
        },
        "dbName": {
            "type": "string",
            "metadata": {
                "description": "The name of the database that will contain the WordPress tables."
            }
        },
        "dbUser": {
            "type": "string",
            "metadata": {
                "description": "The user name that WordPress will use to connect to the database."
            }
        },
        "dbPassword": {
            "type": "securestring",
            "metadata": {
                "description": "The password for the database admin."
            }
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "The user name for the administrator account to create on each instance."
            }
        },
        "sshPublicKey": {
            "type": "string",
            "metadata": {
                "description": "The public key to authenticate with for the admin account."
            }
        },
        "applicationName": {
            "type": "string",
            "metadata": {
                "description": "The value for the application name tag (e.g. WordPress)."
            }
        },
        "environment": {
            "type": "string",
            "metadata": {
                "description": "The value for the environment tag (e.g. Production, Test, Development, Demo, ...)."
            }
        }
    },
    "variables": {
        "suffix": "[skip(parameters('vnetName'), 5)]",
        "scaleSetName": "[concat('vmss-apache-', variables('suffix'))]",
        "appGatewayName": "[concat('agw-apache-', variables('suffix'))]",
        "pipName": "[concat('pip-agw-apache-', variables('suffix'))]",
        "pipAppGwDomainLabel": "[concat('agw-apache-', variables('suffix'))]",
        "availabilityZones": ["1", "2"],
        "subnetAgw": "[concat(resourceGroup().id, '/providers/Microsoft.Network/virtualNetworks/', parameters('vnetName'), '/subnets/subnet-agw-', variables('suffix'))]",
        "subnetPrivate": "[concat(resourceGroup().id, '/providers/Microsoft.Network/virtualNetworks/', parameters('vnetName'), '/subnets/subnet-private-', variables('suffix'))]",
        "contributor": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",      
        "customData": "[concat(
            '#!/bin/bash -xe
            export DB_HOST=', parameters('dbHost'), '.mariadb.database.azure.com
            export DB_NAME=', parameters('dbName'), '
            export DB_USER=', parameters('dbUser'), '@', parameters('dbHost'),'
            export DB_PASSWORD=', parameters('dbPassword'), '
            wget --no-cache -O /tmp/bootstrap-apache.sh https://raw.githubusercontent.com/mcsheaj/azure-wordpress-high-availability-blog/master/vmss-apache-agw/scripts/bootstrap-apache.sh
            bash /tmp/bootstrap-apache.sh
            ')]"
    },
    "resources": [
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2019-09-01",
            "name": "[variables('pipName')]",
            "location": "[resourceGroup().Location]",
            "sku": {
                "name": "Basic"
            },
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "idleTimeoutInMinutes": 4,
                "dnsSettings": {
                    "fqdn": "[concat(variables('scaleSetName'), '.cloudapp.net')]",
                    "domainNameLabel": "[variables('pipAppGwDomainLabel')]"
                },
                "ipTags": []
            },
            "tags": {
                "ApplicationName": "[parameters('applicationName')]",
                "Network": "AGW",
                "Environment": "[parameters('environment')]"
            }
        },
        {
            "type": "Microsoft.Network/applicationGateways",
            "apiVersion": "2019-09-01",
            "name": "[variables('appGatewayName')]",
            "location": "[resourceGroup().Location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('pipName'))]"
            ],
            "properties": {
                "sku": {
                    "name": "Standard_Small",
                    "tier": "Standard",
                    "capacity": 1
                },
                "gatewayIPConfigurations": [
                    {
                        "name": "appGwIpConfig",
                        "properties": {
                            "subnet": {
                                "id": "[variables('subnetAgw')]"
                            }
                        }
                    }
                ],
                "frontendIPConfigurations": [
                    {
                        "name": "appGwFrontendIP",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('pipName'))]"
                            }
                        }
                    }
                ],
                "frontendPorts": [
                    {
                        "name": "appGwFrontendPort",
                        "properties": {
                            "port": 80
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "scalesetLbbPool",
                        "properties": {
                            "backendAddresses": []
                        }
                    }
                ],
                "backendHttpSettingsCollection": [
                    {
                        "name": "appGwBackendHttpSettings",
                        "properties": {
                            "port": 80,
                            "protocol": "Http",
                            "cookieBasedAffinity": "Enabled",
                            "connectionDraining": {
                                "enabled": true,
                                "drainTimeoutInSec": 300
                            },
                            "pickHostNameFromBackendAddress": false,
                            "affinityCookieName": "ApplicationGatewayAffinity",
                            "requestTimeout": 30
                        }
                    }
                ],
                "httpListeners": [
                    {
                        "name": "appGwHttpListener",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/frontendIPConfigurations/appGwFrontendIP')]"
                            },
                            "frontendPort": {
                                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/frontendPorts/appGwFrontendPort')]"
                            },
                            "protocol": "Http",
                            "hostNames": [],
                            "requireServerNameIndication": false
                        }
                    }
                ],
                "requestRoutingRules": [
                    {
                        "name": "rule1",
                        "properties": {
                            "ruleType": "Basic",
                            "httpListener": {
                                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/httpListeners/appGwHttpListener')]"
                            },
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/backendAddressPools/scalesetLbbPool')]"
                            },
                            "backendHttpSettings": {
                                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/backendHttpSettingsCollection/appGwBackendHttpSettings')]"
                            }
                        }
                    }
                ],
                "enableHttp2": true
            },
            "tags": {
                "ApplicationName": "[parameters('applicationName')]",
                "Network": "Private",
                "Environment": "[parameters('environment')]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "apiVersion": "2019-03-01",
            "name": "[variables('scaleSetName')]",
            "location": "[resourceGroup().Location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName'))]"
            ],
            "sku": {
                "name": "[parameters('apacheMachineSku')]",
                "tier": "Standard",
                "capacity": "[int(parameters('apacheMinCapacity'))]"
            },
            "zones": "[variables('availabilityZones')]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "upgradePolicy": {
                    "mode": "Automatic"
                },
                "virtualMachineProfile": {
                    "osProfile": {
                        "computerNamePrefix": "[toLower(substring(concat('apache', uniqueString(resourceGroup().id)), 0, 9))]",
                        "adminUsername": "[parameters('adminUsername')]",
                        "linuxConfiguration": {
                            "disablePasswordAuthentication": true,
                            "ssh": {
                                "publicKeys": [
                                    {
                                        "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
                                        "keyData": "[parameters('sshPublicKey')]"
                                    }
                                ]
                            },
                            "provisionVMAgent": true
                        },
                        "customData": "[base64(variables('customData'))]"
                    },
                    "storageProfile": {
                        "osDisk": {
                            "createOption": "FromImage",
                            "caching": "ReadWrite",
                            "managedDisk": {
                                "storageAccountType": "Standard_LRS"
                            },
                            "diskSizeGB": 30
                        },
                        "imageReference": {
                            "publisher": "Canonical",
                            "offer": "UbuntuServer",
                            "sku": "18.04-LTS",
                            "version": "latest"
                        }
                    },
                    "networkProfile": {
                        "networkInterfaceConfigurations": [
                            {
                                "name": "[concat('nic-', variables('scaleSetName'))]",
                                "properties": {
                                    "primary": true,
                                    "ipConfigurations": [
                                        {
                                            "name": "[concat('ipconfig-', variables('scaleSetName'))]",
                                            "properties": {
                                                "subnet": {
                                                    "id": "[variables('subnetPrivate')]"
                                                },
                                                "applicationGatewayBackendAddressPools": [
                                                    {
                                                        "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/backendAddressPools/scalesetLbbPool')]"
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                },
                "overprovision": false
            },
            "tags": {
                "ApplicationName": "[parameters('applicationName')]",
                "Network": "AGW",
                "Environment": "[parameters('environment')]"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "name": "[concat(parameters('storageAccountName'), '/Microsoft.Authorization/', guid(resourceGroup().id, deployment().name))]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachineScaleSets', variables('scaleSetName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('contributor')]",
                "principalId": "[reference(variables('scaleSetName'), '2017-12-01', 'Full').identity.principalId]"
            }
        }
    ]
}
